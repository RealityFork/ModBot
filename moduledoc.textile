### ModBot Module-Writing Readme V0.0000000000000000000000001 ###

Firstly, modules are loaded by ModBot by creating an instance of the 'Module' class and storing references to it. For this reason, your module MUST have a class called 'Module'. All commands and hooks are run inside this class. You can define it like this:
<pre><code>
class Module():

	# Methods and shit go here
</code></pre>

Inside the Module class, you have some options to better define what your module does, and what it depends on.


## DEPENDS ##

Firstly, there is the depends list. This is a list of other modules that yours depends on. For example if your module uses MySQL and logging, then you can define the MySQL and logging helper modules as dependancies like this:
<pre><code>
class Module():
	depends = ['log', 'mysql']
</code></pre>

When your module is loaded, ModBot will create references to all of the modules listed in depends inside your module. E.g. the MySQL module will be situated in self.mysql.



## HOOKS ##

Secondly, there are certain system hooks that MobBot allows your Module to react to. These are events like a message being posted in a channel, MobBot joining a chanel, a user joining a channel or a channel mode changing.
To get the names of the hooks on offer, look at the twisted IRC documentation here: http://twistedmatrix.com/documents/8.2.0/api/twisted.words.protocols.irc.IRCClient.html

Most of the functions documented there are run as hooks (with the same names). To define a hook, simply create a dictionary object, use the hook name as the key, and the function that you would like to be run on that hook as the value. E.g:
<pre><code>
class Module():
	depends = ['log', 'mysql']
	hooks = {'privmsg': 'myPrivMsgFunction'}

|||	def myPrivMsgFunction(self, user, channel, message):
		pass # Do stuff
</code></pre>

The code above will mean that the function 'myPrivMsgFunction' will be run when a message is either sent to the current channel, or a private message is sent to ModBot. The parameters seen in the above example are not the same for each hook, and you should check with the twisted documentation for the parameters sent with each hook, and what they contain.


## COMMANDS ##

A command is similar to a hook in function, but is executed when a user says the command name prefixed with '!' in the channel. This is probably best demonstrated by extending our example:
<pre><code>
class Module():
	depends = ['log', 'mysql']
	hooks = {'privmsg': 'myPrivMsgFunction'}
	commands = {'testcommand': 'myCmdFunction'}

	def myPrivMsgFunction(self, user, channel, message):
		pass # Do stuff

	def myCmdFunction(self, user, channel, args):
		pass # Do stuff
</code></pre>

As you can see, the commands are defined in the same way as hooks. With the above code, the function 'myCmdFunction' will be run when a user says '!testcommand' followed by anything in the channel.
User is the username of the person who ran the command, channel is the channel that the command was used in (this is equal to user if the command was sent as a private messgage to ModBot), and args is a list of words said after the command, split at space characters. E.g. if someone said '!testcommand one two' with the above example, the args list would contain:
<pre><code>
['one', 'two']
</code></pre>
